<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Lo√Øc TRUCHOT Website</title>
        <link>https://loic.truchot.dev</link>
        <description></description>
        <generator>Zola</generator>
        <language>en</language>
        <atom:link href="https://loic.truchot.dev/rss.xml" rel="self" type="application/rss+xml"/>
        <lastBuildDate>Wed, 08 Sep 2021 00:00:00 +0000</lastBuildDate>
        <item>
            <title>One Day With Racket</title>
            <pubDate>Wed, 08 Sep 2021 00:00:00 +0000</pubDate>
            <link>https://loic.truchot.dev/blog/one-day-with-racket/</link>
            <guid>https://loic.truchot.dev/blog/one-day-with-racket/</guid>
            <description>&lt;blockquote&gt;
&lt;p&gt;7:56 AM - What brought me here? I&#x27;m a JavaScript Senior, and it&#x27;s often mentioned that JS was inspired by Scheme.&lt;&#x2F;p&gt;
&lt;p&gt;Scheme is a dialect of LISP (an old family of languages), where everything is a workable list, looking like &lt;code&gt;(function-name, arg1, arg2, arg3...)&lt;&#x2F;code&gt;.
It is very promising for A.I., and allows you to easily define Domain Specific Languages (DSL) with your own keywords and identifiers.&lt;&#x2F;p&gt;
&lt;p&gt;Scheme is a classic academic LISP from MIT, and Racket is a scholar&#x27;s attempt at making LISP even more universally accessible (Logo is another well-known dialect).
So, let&#x27;s do some Racket at least one day in our developer life!&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;find-basic-documentation&quot;&gt;Find Basic Documentation&lt;&#x2F;h2&gt;
&lt;p&gt;There are thousands of programming languages available, and plenty of websites for each of them. We can often find the official documentation for a particular one by just typing: &amp;lt;language&amp;gt;-lang.org: rust-lang.org, elm-lang.org, etc.&lt;&#x2F;p&gt;
&lt;p&gt;Upon arriving at https:&#x2F;&#x2F;racket-lang.org, I&#x27;m happy to discover a clean and modern website with lively content. Before diving into in-depth documentation, I hope to find a clear introduction of the language.&lt;br &#x2F;&gt;
After a few clicks, I reach
&lt;a href=&quot;https:&#x2F;&#x2F;docs.racket-lang.org&#x2F;quick&#x2F;index.html&quot;&gt;Quick Introduction to Racket with Pictures&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;quick-introduction&quot;&gt;Quick Introduction&lt;&#x2F;h2&gt;
&lt;p&gt;It seems I have to install &lt;a href=&quot;https:&#x2F;&#x2F;download.racket-lang.org&#x2F;&quot;&gt;Racket&#x2F;DrRacket installer&lt;&#x2F;a&gt; (~175Mb) to be able to run the examples. A very simple and smooth process on Windows 10. Let&#x27;s open it now.&lt;&#x2F;p&gt;
&lt;p&gt;It&#x27;s a clean IDE interface with a menu, an empty document (named &amp;quot;definitions area&amp;quot;) and a REPL (&amp;quot;interactions area&amp;quot;) with some hints displayed.&lt;&#x2F;p&gt;
&lt;p&gt;The introduction continues, however the documentation missed a small step: before copying and pasting the samples provided, I had to choose &amp;quot;racket lang&amp;quot; in the &amp;quot;languages&amp;quot; menu. Then I had to paste &lt;code&gt;#lang slideshow&lt;&#x2F;code&gt; in the def area, and press the &amp;quot;run&amp;quot; button.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;blog&#x2F;2021-09-08-one_day_with_racket&#x2F;img&#x2F;01-getting_rdy.png&quot; alt=&quot;Getting ready&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;My first lines of code will take place in the REPL part.
Writing &lt;code&gt;(circle 10)&lt;&#x2F;code&gt; and pressing [Enter] draws a 10px circle in the same area.&lt;br &#x2F;&gt;
Guess what the following commands will do?&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(circle &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
(circle &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;50&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
(rectangle &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;100 20&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
(arrow &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;20 10&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;It draws shapes (and makes coffee)!&lt;br &#x2F;&gt;
So I can also guess that:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;#lang slideshow&lt;&#x2F;code&gt; contains useful functions to display certain shapes&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;circle&lt;&#x2F;code&gt;, &lt;code&gt;rectangle&lt;&#x2F;code&gt;, &lt;code&gt;arrow&lt;&#x2F;code&gt; are function names&lt;&#x2F;li&gt;
&lt;li&gt;I can execute these functions by putting them in parentheses, passing arguments separated by spaces.&lt;&#x2F;li&gt;
&lt;li&gt;the REPL is enough to directly interpret these inputs, then ouput the result.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;blog&#x2F;2021-09-08-one_day_with_racket&#x2F;img&#x2F;02-repl.png&quot; alt=&quot;REPL&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;I play around without checking the docs, and ultimately make deliberate errors to see how useful the interpreter is.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(triangle &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;30&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
(rectangle &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
rectangle &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;Errors concerning undefined identifier seem easy to catch.&lt;&#x2F;li&gt;
&lt;li&gt;Errors linked to arguments are a little more frightening: the technical word &amp;quot;arity&amp;quot; refers to the expected number of arguments of a function.&lt;&#x2F;li&gt;
&lt;li&gt;Missing parentheses did not give me an error, just an unexpected result that I suspect to mean &amp;quot;this function as a value&amp;quot; (not executed).&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;By diving deeper, I discover that I can add several shapes on the same line...&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(hc-append&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
    (rectangle &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;20 20&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
    (circle &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;20&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I&#x27;m assuming &lt;code&gt;hc-append&lt;&#x2F;code&gt; means &amp;quot;horizontal-centered append&amp;quot;, but something already seems inevitable: any function name will be important, as they are so curial here.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;blog&#x2F;2021-09-08-one_day_with_racket&#x2F;img&#x2F;03-line_of_shapes.png&quot; alt=&quot;&amp;quot;REPL&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;...and so it begins!&lt;&#x2F;p&gt;
&lt;p&gt;The famous LISP parentheses festival that shows the order of execution of functions has begun.&lt;br &#x2F;&gt;
Despite its reputation, I feel like it&#x27;s clean and natural at the moment. The language itself seems to contain very few symbols, and mostly for simple instructions.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;create-my-own-stuff&quot;&gt;Create my own stuff&lt;&#x2F;h2&gt;
&lt;p&gt;Until now, I used some premade functions.
But how do I make my own?&lt;&#x2F;p&gt;
&lt;p&gt;The quick-start guide tells me how to do it with the &lt;code&gt;define&lt;&#x2F;code&gt; identifier:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;define &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;c10 (circle &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
c10&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
(hc-append c10 c10 c10 c10)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;blog&#x2F;2021-09-08-one_day_with_racket&#x2F;img&#x2F;04-define.png&quot; alt=&quot;define&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;define&lt;&#x2F;code&gt; acts as a function that takes 2 arguments: a variable name, and a value. Now &lt;code&gt;c10&lt;&#x2F;code&gt; is available as a classic variable.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;9:18 AM - It feels astonishingly simple to manipulate graphics, so I decide to write a snake-game in Racket before the sun goes down. After all, I&#x27;ve got the whole day...&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;I can define a lot of stuff very easily:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;define &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;eye (circle &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;define &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;nose (rectangle &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;10 20&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
(ht-append eye nose eye)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;define &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;face (ht-append eye nose eye))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
face&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
face&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;But I reach the point where the code loses some visiblity, so I&#x27;ll start using the &amp;quot;def area&amp;quot; to define instructions, and keep the REPL to execute them...&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;blog&#x2F;2021-09-08-one_day_with_racket&#x2F;img&#x2F;05-my_stuff.png&quot; alt=&quot;my stuff&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;It&#x27;s clearer now, and I get a program I can save on my disk: &lt;code&gt;quick-start.rkt&lt;&#x2F;code&gt;.&lt;br &#x2F;&gt;
This is not the usual approach of programming, of course. I&#x27;m used to a &amp;quot;soup&amp;quot; where everything is mixed.&lt;br &#x2F;&gt;
Here, definitions stay &amp;quot;pure&amp;quot;, and the process of creating the program is REPL-oriented, playing with code until it works.&lt;&#x2F;p&gt;
&lt;p&gt;A few remarks:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ht-append&lt;&#x2F;code&gt; can take any number of arguments. If the first argument is a number, it represents the white-space between picts. It reminds me of the &lt;a href=&quot;https:&#x2F;&#x2F;www.w3schools.com&#x2F;java&#x2F;java_methods_overloading.asp&quot;&gt;overloading practice&lt;&#x2F;a&gt; in OOP.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;vc-append&lt;&#x2F;code&gt; stands for vertical-centered, and so on with &lt;code&gt;hb-append&lt;&#x2F;code&gt; (horizontal-bottom), &lt;code&gt;vt-append&lt;&#x2F;code&gt; (vertical-top)...&lt;&#x2F;li&gt;
&lt;li&gt;when the mouse hovers a defined name, DrRacket shows an arrow to find its definition - I discovered that by accident, and it&#x27;s amazing!&lt;&#x2F;li&gt;
&lt;li&gt;there is no fatality about parentheses hell, as long as I define names smartly along the way.&lt;&#x2F;li&gt;
&lt;li&gt;Racket already feels like a DSL maker. I can imagine a function that creates a triangle, another to make a square, another to combine them and make a little house, and a house function just to wrap all of this... It reminds me of the &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;SHRDLU&quot;&gt;SHRDLU&lt;&#x2F;a&gt; initiative in A.I.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;What about defining my own function? i.e. there is no &lt;code&gt;square&lt;&#x2F;code&gt; function in this package, so let&#x27;s create one.&lt;&#x2F;p&gt;
&lt;p&gt;Nothing too new:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;define&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5cb3fa;&quot;&gt;square &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;n)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
  (rectangle n n))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In place of taking a variable name, &lt;code&gt;define&lt;&#x2F;code&gt; takes a function name and some arguments surrounded by parentheses.&lt;br &#x2F;&gt;
Then, a second pair of parentheses contains the actual code to run on execution.&lt;br &#x2F;&gt;
And here is my little 30px square:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;blog&#x2F;2021-09-08-one_day_with_racket&#x2F;img&#x2F;06-square.png&quot; alt=&quot;square&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;my-first-challenge&quot;&gt;My first challenge&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;10:10 AM - I just decided to challenge myself. Can I create a function able to draw coloured cars?&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;I don&#x27;t want to only stick to the tutorial. If I found &lt;code&gt;circle&lt;&#x2F;code&gt; and &lt;code&gt;hc-append&lt;&#x2F;code&gt; in the documentation, I&#x27;m pretty sure I will find the other shapes available, and all the ways to combine them.&lt;&#x2F;p&gt;
&lt;p&gt;Here we go, unsurprisingly:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;blog&#x2F;2021-09-08-one_day_with_racket&#x2F;img&#x2F;07-docs.png&quot; alt=&quot;docs&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;All I need is a kind of &lt;code&gt;disk&lt;&#x2F;code&gt; for the wheel, and it exists. Now, how would I put a white disk in a slightly bigger black disk?&lt;&#x2F;p&gt;
&lt;p&gt;It appears there is a &lt;code&gt;colorize&lt;&#x2F;code&gt; function that takes any &amp;quot;pict&amp;quot; (our shape) and &lt;a href=&quot;https:&#x2F;&#x2F;docs.racket-lang.org&#x2F;draw&#x2F;color-database___.html&quot;&gt;x11 color&lt;&#x2F;a&gt; as a 2d argument.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(disk &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;30&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;; a disk, black by default&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(colorize (disk &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;25&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;lightgray&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;; a gray disk&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I can even put them together with the &lt;code&gt;cc-superimpose&lt;&#x2F;code&gt; function, a way to superimpose on center - center!&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;define &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;black-disk&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
    (disk &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;30&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;define &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;gray-disk&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
    (colorize&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
        (disk &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;25&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;white&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
(cc-superimpose black-disk gray-disk)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;So my final definitions could be:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;define &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;tire&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
    (disk &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;30&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;define &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;hubcap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
    (colorize (disk &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;25&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;white&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;define &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;wheel&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
    (cc-superimpose tire hubcap))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;define &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;wheels&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
    (hc-append &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; wheel wheel))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;define&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5cb3fa;&quot;&gt;car &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;color)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
    (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;define &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;body&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
        (colorize&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
            (filled-rectangle &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;180 20&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
            color))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
    (vc-append body wheels))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And let&#x27;s try it:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;blog&#x2F;2021-09-08-one_day_with_racket&#x2F;img&#x2F;08-cars.png&quot; alt=&quot;cars&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;OMG, so easy. What is this strange feeling? Am I a wizard or something? It works so well, and it was just some instinct and a little RTFM work. Thank you DrRacket!&lt;&#x2F;p&gt;
&lt;p&gt;As you can see, I tried to define a function in a function for the body of my car. I was not sure it would work, but it did!&lt;&#x2F;p&gt;
&lt;p&gt;Going further in the documentation, it appears that&#x27;s the job of the &lt;code&gt;let&lt;&#x2F;code&gt;&#x2F;&lt;code&gt;let*&lt;&#x2F;code&gt; identifier too (the &lt;code&gt;*&lt;&#x2F;code&gt; authorizes several &lt;code&gt;let&lt;&#x2F;code&gt; to use each other).&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;#lang slideshow&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;define &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;wheel&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
  (let([tire (disk &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;30&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;)]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
       [hubcap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
        (colorize (disk &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;25&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;white&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;)])&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
    (cc-superimpose tire hubcap)))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;define &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;wheels&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
  (hc-append &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; wheel wheel))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;define&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5cb3fa;&quot;&gt;car &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;color)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
  (let* ([1st-part&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
          (filled-rectangle &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;90 20&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;)]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
         [2nd-part&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
          (filled-rectangle &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;180 20&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;)]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
         [compartment&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
          (colorize 1st-part color)]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
         [body (colorize&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
                2nd-part color)])&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
    (vc-append compartment body wheels)))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This little recfactoring limits the scope of my definitions, and that&#x27;s always good practice. I can go further, and put everything in the car definition.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;blog&#x2F;2021-09-08-one_day_with_racket&#x2F;img&#x2F;09-violet_car.png&quot; alt=&quot;use let*&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;first-citizen&quot;&gt;First citizen&lt;&#x2F;h2&gt;
&lt;p&gt;One of the big strenghts of JavaScript is the &amp;quot;function as value&amp;quot;, which implies that a function can take another one as an argument (also known as higher-order functions).&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5cb3fa;&quot;&gt;example&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;callback&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;) {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
  console.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;hello&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;);&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;callback&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;();&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;example&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;console.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;world!&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;));&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And of course you can put functions in variables, or even make a function that returns another one (aka currying, thanks EcmaGod for the arrow function).&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;car = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;size&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;color&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
  console.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;`It&amp;#39;s a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;size&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;} ${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;color&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt; car!`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;);&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
};&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;bigCar = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;car&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;big&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;);&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;smallCar = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;car&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;small&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;);&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;bigCar&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;blue&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;);&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;bigCar&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;red&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;);&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;smallCar&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;violet&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;);&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This is the heritage of LISP, so in Racket we can also pass a function to another as an argument, and so on. Functions are values like the others (aka first-class citizen function)&lt;&#x2F;p&gt;
&lt;p&gt;Ok, but in which case will this happen?&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;10:51 AM - I have an idea of a good use case. I want to be able to ask the program a specific number of colored cars or houses. I suspect it will request using &amp;quot;functions as value&amp;quot;.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Let&#x27;s make a house first. I had to dive in the documentation to find &lt;code&gt;rotate&lt;&#x2F;code&gt;, &lt;code&gt;inset&lt;&#x2F;code&gt;, &lt;code&gt;pi&lt;&#x2F;code&gt;, &lt;code&gt;sqrt&lt;&#x2F;code&gt;, without any surprise.&lt;&#x2F;p&gt;
&lt;p&gt;Before you read this code, be prepared: in LISP, math operators are functions, defined and working like any other.&lt;br &#x2F;&gt;
So:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;1 2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;; returns 3&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;4 3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;; returns 12&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&#x2F; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;8 2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;; returns 4&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;5 5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;; returns true (#t) since it checks number equality&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;
; and so on.&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In other words, no more &amp;quot;infix&amp;quot; operators (symbol in between the 2 operands): an addition is no more than a simple function and its signature is &lt;code&gt;(number, number) -&amp;gt; number&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;define&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5cb3fa;&quot;&gt;house &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;color)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
  (let* ([size &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;30&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
         &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;; diagonal to assemble well sized home and roof&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;         [diag (* (sqrt &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;) size)]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
         &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;; base rectangles for roof, home, door&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;         [rect1 (filled-rectangle &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;30 30&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;)]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
         [rect2 (filled-rectangle diag diag)]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
         [rect3 (filled-rectangle &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;10 20&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;)]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
         &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;; roof is a rotated&#x2F;clipped square&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;
         ; (in other word, a triangle)&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;         [roof (let* ([colored (colorize rect1 color)]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
                      [rotated (rotate colored (&#x2F; pi &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;))])&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
                 (inset rotated &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;0 0 0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;20&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;))]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
         [home (colorize rect2 color)]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
         &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;; structure is just a roof on a home&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;         [structure  (vc-append roof home)]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
         [door (colorize rect3 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;gray&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;)])&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;;let&amp;#39;s add a door on center-bottom&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;    (cb-superimpose structure door)))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This is improvisation, but it works! Even if this piece of code appears complex, I swear it was easy to write! And now, let&#x27;s just use &lt;code&gt;(house &amp;quot;color&amp;quot;)&lt;&#x2F;code&gt; everywhere...&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;blog&#x2F;2021-09-08-one_day_with_racket&#x2F;img&#x2F;10-blue_house.png&quot; alt=&quot;blue house&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Now let&#x27;s write this very special function. I just want to say &amp;quot;draw 3 blue houses&amp;quot; and get them. The signature would look like &lt;code&gt;(n, color, thing) -&amp;gt; pict&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;; dumb color identifiers&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;define &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;blue &amp;quot;blue&amp;quot;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;define &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;red &amp;quot;red&amp;quot;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;; draw function&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;define&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5cb3fa;&quot;&gt;draw &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;n color thing)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
    (hc-append (thing color)))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
(draw &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; blue house)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
(draw &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; red car)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;It works, and I can see here that &lt;code&gt;thing&lt;&#x2F;code&gt; is a &amp;quot;function as value&amp;quot;, where &lt;code&gt;draw&lt;&#x2F;code&gt; is an &amp;quot;higher order function&amp;quot;: a function in charge of executing another.&lt;&#x2F;p&gt;
&lt;p&gt;The next challenge is to do something with this &lt;code&gt;n&lt;&#x2F;code&gt; parameter.¬†I need a &amp;quot;for loop&amp;quot;, but guess what, it&#x27;s not [idiomatic](Programming idiom) Racket!&lt;&#x2F;p&gt;
&lt;p&gt;Indeed, Racket is not a big set of reserved imperative keywords like other languages are. On the contrary, it&#x27;s a very small set of powerful identifiers (&lt;code&gt;define&lt;&#x2F;code&gt;, &lt;code&gt;let&lt;&#x2F;code&gt;...), just enough to create our own language (And indeed, some forms of &amp;quot;for&amp;quot; or &amp;quot;while&amp;quot; exist in Racket langs&#x2F;libraries&#x2F;modules as defined functions).&lt;&#x2F;p&gt;
&lt;p&gt;Basic iteration will be built on top of recursion. In JavaScript, recursion looks like this:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;recursiveFunction = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;n &amp;lt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;) {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
    console.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;the end!&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;);&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
  } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
    console.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;n is now &amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;+ n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;);&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;recursiveFunction&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;n - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;);&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
  }&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
};&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;recursiveFunction&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;);&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The loop occurs because the function calls itself until a condition is met - or &amp;quot;while&amp;quot; a condition is still valid (just like any loop in fact - but recursion shows that functions can be loops, and &amp;quot;for&amp;quot; or &amp;quot;while&amp;quot; are an optional tool).&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s try recursion in Racket. Before that, I&#x27;ll need a few new tools that I easily found in the documentation:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;print&lt;&#x2F;code&gt; that writes in the console like &lt;code&gt;console.log&lt;&#x2F;code&gt; in JS&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;string-append&lt;&#x2F;code&gt; for string concatenation&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;number-&amp;gt;string&lt;&#x2F;code&gt; to cast a number as a string&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;define&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5cb3fa;&quot;&gt;recursive-function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;n)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
  (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;print &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(string-append&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;n is now &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
          (number-&amp;gt;string n))))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Last but not least:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;if&lt;&#x2F;code&gt; is a function like all the others, it takes 3 arguments: a &amp;quot;test&amp;quot; (condition), a &amp;quot;then&amp;quot; (consequent) and an &amp;quot;else&amp;quot; (alternative)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(print (if&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
        (= 3 3)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
        &amp;quot;3 is 3&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
        &amp;quot;wtf&amp;quot; ))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;begin&lt;&#x2F;code&gt; is a function that executes several functions one by one, and just keeps the result of the last one.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Ok, let&#x27;s put all the pieces together:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;define&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5cb3fa;&quot;&gt;recursive-function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;n)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
  (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;([msg1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;the end!&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
        [msg2 (string-append&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
               &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;n is now &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
               (number-&amp;gt;string n))])&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
    (if&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
     (&amp;lt;= n &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
     (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;print &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;msg1)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
     (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;begin &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;print &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;msg2)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
            (recursive-function (- n &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;))))))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
(recursive-function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;blog&#x2F;2021-09-08-one_day_with_racket&#x2F;img&#x2F;11-recursion.png&quot; alt=&quot;recursion&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;If I want to append a picture to previous pictures recursively, I have to begin with some kind of &amp;quot;empty&amp;quot; picture.&lt;&#x2F;p&gt;
&lt;p&gt;Indeed, a function that adds &amp;quot;42&amp;quot; to nothing (null &#x2F; undefined) will break:¬†it must at least add &amp;quot;1&amp;quot; to &amp;quot;0&amp;quot;.&lt;&#x2F;p&gt;
&lt;p&gt;This empty-picture base-case is named &lt;a href=&quot;https:&#x2F;&#x2F;docs.racket-lang.org&#x2F;pict&#x2F;Basic_Pict_Constructors.html?q=pict#%28def._%28%28lib._pict%2Fmain..rkt%29._blank%29%29&quot;&gt;blank&lt;&#x2F;a&gt; in the library.&lt;&#x2F;p&gt;
&lt;p&gt;And now, I can apply recursion to my example:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;; draw function&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;define&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5cb3fa;&quot;&gt;draw &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;n color thing [pict (blank)])&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
  (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&amp;gt; n &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;; n greater than 0&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;      (draw (- n &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;; continue to combine picts&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;            color&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
            thing&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
            (hc-append pict (thing color)))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
      pict))&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;; else return the final pict&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;blog&#x2F;2021-09-08-one_day_with_racket&#x2F;img&#x2F;12-draw_me.png&quot; alt=&quot;draw me&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Hey, what is this unknown &lt;code&gt;[pict (blank)]&lt;&#x2F;code&gt;? It&#x27;s a way to provide an optional parameter with a default value.&lt;&#x2F;p&gt;
&lt;p&gt;In ES6, it could be mirrored with:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5cb3fa;&quot;&gt;draw&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;color&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;thing&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;pict = new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;Pict&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;()) {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;&#x2F;&#x2F; ...&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;...assuming there is a &lt;code&gt;Pict&lt;&#x2F;code&gt; constructor that returns an empty pict.&lt;&#x2F;p&gt;
&lt;p&gt;In fact, this case is a beautiful illustration of what mathematicians call a &lt;code&gt;Monoid&lt;&#x2F;code&gt;. There&#x27;s special algebra for &lt;code&gt;pict&lt;&#x2F;code&gt; where I can add them infinitely, producing a new &lt;code&gt;pict&lt;&#x2F;code&gt;, starting those operations with the &lt;code&gt;blank&lt;&#x2F;code&gt; neutral element.&lt;&#x2F;p&gt;
&lt;p&gt;This case is so common in Computer Science (addition with 0 as neutral, multiplication with 1 as neutral, concatenation with &amp;quot;&amp;quot; as neutral, etc.) that the type&#x2F;class &lt;code&gt;Monoid&lt;&#x2F;code&gt; itself exists in different languages and frameworks.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;first-conclusions&quot;&gt;First Conclusions&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;2:16 PM - Sorry, but I&#x27;m starving. It&#x27;s time for lunch.&lt;&#x2F;p&gt;
&lt;p&gt;3:15 PM - Wow. We did a lot this morning, but time flies. Let&#x27;s take stock, and move on to the next idea: an animated game.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Racket (and therefore LISP) appears to be incredibly simple to write. Final expressions like &lt;code&gt;draw me a sheep&lt;&#x2F;code&gt; are equally easy to read, very close to natural (human) language if definitions are done that way.&lt;&#x2F;p&gt;
&lt;p&gt;Nonetheless, sometimes it still is difficult for me to read implementation details, especially when a definition goes crazy. So I recommend to take it one step at a time, focusing on quality and modularization of ideas from the beginning.&lt;&#x2F;p&gt;
&lt;p&gt;The first big secret that Racket teaches me is the following: you can do more with less. It sounds like Taoism, but indeed clarity grows because the field is almost empty. There are very few building blocks, but they contain an unlimited power, by the law of combination (like so much other fields in nature).&lt;&#x2F;p&gt;
&lt;p&gt;If you dive in a definition, you will see other definitions that look the same. Declarativeness is always preserved (and I advocate for that in all languages, so I&#x27;m thrilled).&lt;&#x2F;p&gt;
&lt;p&gt;Imperativeness can always be avoided, it&#x27;s not idiomatic here. And because everything is finally a simple list of stuff that begins with an identifier, you can understand the whole language mechanics in a few hours.&lt;&#x2F;p&gt;
&lt;p&gt;Wether or not an identifier exists is not the real question:¬†you take as little (or an enormous backed-in DSL) as you wish.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;(define x y)&lt;&#x2F;li&gt;
&lt;li&gt;(define (x y) z)&lt;&#x2F;li&gt;
&lt;li&gt;(+ 1 2)&lt;&#x2F;li&gt;
&lt;li&gt;(if x y z)&lt;&#x2F;li&gt;
&lt;li&gt;(list &amp;quot;blue&amp;quot; &amp;quot;red&amp;quot; &amp;quot;green&amp;quot;)&lt;&#x2F;li&gt;
&lt;li&gt;(map (lambda (x) (* x x)) a-list)&lt;&#x2F;li&gt;
&lt;li&gt;and so on&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;I know that LISP stands for &lt;strong&gt;LIS&lt;&#x2F;strong&gt;t &lt;strong&gt;P&lt;&#x2F;strong&gt;rocessor and I understand why. I clearly get why it&#x27;s a good language to learn the basics of CS, and even why &lt;a href=&quot;https:&#x2F;&#x2F;fr.wikipedia.org&#x2F;wiki&#x2F;Robert_C._Martin&quot;&gt;Uncle Bob&lt;&#x2F;a&gt; himself says that maybe in the future, a lot of disparate languages will converge on some kind of LISP.&lt;&#x2F;p&gt;
&lt;p&gt;If one day hardware capacity is no more a limitation, it indeed can become the only language to produce any DSL you want, that every developer could understand around the world without struggling with new weird language mechanics, while focusing on a syntax and algebra that perfectly describe a domain...&lt;&#x2F;p&gt;
&lt;h2 id=&quot;back-to-work&quot;&gt;Back To Work&lt;&#x2F;h2&gt;
&lt;p&gt;Now, 2 new crazy challenges:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;What about asking for &amp;quot;4 big blue houses&amp;quot;?&lt;&#x2F;li&gt;
&lt;li&gt;How to make stuff move in time?&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;scaling&quot;&gt;Scaling&lt;&#x2F;h3&gt;
&lt;p&gt;Back to the docs! I discover that Racket is strongly typed.
WTF? I didn&#x27;t write any type since the beginning!&lt;&#x2F;p&gt;
&lt;p&gt;Indeed, it&#x27;s dynamically typed, but it&#x27;s not weakly typed: those are 2 different concepts.
In JavaScript &amp;quot;number&amp;quot; is a weak type, for all kinds of numbers.
In racket, a number has a stonger type, like &amp;quot;integer&amp;quot;... but still is automatically assigned (like in JS).&lt;&#x2F;p&gt;
&lt;p&gt;One very smart thing about the &lt;code&gt;pict-lib&lt;&#x2F;code&gt; provided by &lt;code&gt;#lang&#x2F;slideshow&lt;&#x2F;code&gt;, is that almost all functions take a &lt;code&gt;pict&lt;&#x2F;code&gt; typed value and return a &lt;code&gt;pict&lt;&#x2F;code&gt; as well. That&#x27;s why I can combine them, and reuse them. More generally, that&#x27;s how you make a good DSL, and not only a framework&#x2F;library.&lt;&#x2F;p&gt;
&lt;p&gt;So this should work perfectly:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(scale (house &amp;quot;orangered&amp;quot;) 2)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
(scale (rotate&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
        (car &amp;quot;powderblue&amp;quot;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
        (&#x2F; pi 5))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
       0.5)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;blog&#x2F;2021-09-08-one_day_with_racket&#x2F;img&#x2F;13-scale1.png&quot; alt=&quot;scale 1&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Now I&#x27;ll enhance my legacy code. If I want to be able to ask for a big, small or normal-sized house I&#x27;ll need some kind of &lt;code&gt;switch&lt;&#x2F;code&gt; or &lt;code&gt;else if&lt;&#x2F;code&gt; statement.&lt;&#x2F;p&gt;
&lt;p&gt;That switch can be done using &lt;a href=&quot;https:&#x2F;&#x2F;docs.racket-lang.org&#x2F;guide&#x2F;case.html&quot;&gt;case&lt;&#x2F;a&gt; whereas else-if is more like &lt;a href=&quot;https:&#x2F;&#x2F;docs.racket-lang.org&#x2F;reference&#x2F;if.html&quot;&gt;cond&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(define&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
  (draw n size color thing [pict (blank)])&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
  (if&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
   (&amp;gt; n &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;; condition&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;
   ; if true&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;   (let*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
       ([scale-size&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
         (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;size&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
           [(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;small&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
           [(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;big&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
           [else &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
           )]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
        [next-pict (hc-append&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
                    pict&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
                    (scale&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
                     (thing color)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
                     scale-size))])&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
     (draw (- n &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;) size color thing next-pict))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
   &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;; if false&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;   pict))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;blog&#x2F;2021-09-08-one_day_with_racket&#x2F;img&#x2F;14-scale2.png&quot; alt=&quot;scale 2&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;moving&quot;&gt;Moving&lt;&#x2F;h3&gt;
&lt;p&gt;The future snake will be moving in a 2d plane.
Is it even possible with my current &lt;code&gt;lang&#x2F;slideshow&lt;&#x2F;code&gt;? There is indeed an &lt;a href=&quot;https:&#x2F;&#x2F;docs.racket-lang.org&#x2F;pict&#x2F;Animation_Helpers.html&quot;&gt;animation documentation&lt;&#x2F;a&gt;, but it appears to be highly related to slideshow stuff.&lt;&#x2F;p&gt;
&lt;p&gt;And it&#x27;s not only about moving: I&#x27;ll need a window, a game loop, collision stuff and so on.
Let&#x27;s take some time to choose a better &lt;code&gt;lang&lt;&#x2F;code&gt; than slideshow for this advanced visual stuff...&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;It&#x27;s already 4:45 PM - Will I get a chance to get something running before midnight? Differents tools appear to make games, dependant on new stuff.
A bit like this &lt;a href=&quot;https:&#x2F;&#x2F;docs.racket-lang.org&#x2F;gui&#x2F;index.html&quot;&gt;racket&#x2F;gui&lt;&#x2F;a&gt;, but it will force me to learn a new way to draw: the &lt;code&gt;draw-lib&lt;&#x2F;code&gt;...
I continue but &lt;a href=&quot;https:&#x2F;&#x2F;pkgd.racket-lang.org&#x2F;pkgn&#x2F;search?q=game&quot;&gt;searching&lt;&#x2F;a&gt; takes time. I even find a &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Bogdanp&#x2F;hebi&#x2F;blob&#x2F;master&#x2F;hebi.rkt&quot;&gt;fully working snake game&lt;&#x2F;a&gt;, but the code is too avanced for me...&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;5:09 PM - In the end, my choice falls on the &lt;a href=&quot;https:&#x2F;&#x2F;docs.racket-lang.org&#x2F;r-cade&#x2F;index.html&quot;&gt;r-cade packages&lt;&#x2F;a&gt; - it seems to contain everything I need, and claims to have a snake-game example (that I will avoid for now, but will compare with in the end)&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;a-snake-game&quot;&gt;A Snake Game&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;r-cade-setup&quot;&gt;R-cade Setup&lt;&#x2F;h3&gt;
&lt;p&gt;Let&#x27;s try the simplest example game:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;#lang racket&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;require &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;r-cade)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;; main function, called once per frame&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;define&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5cb3fa;&quot;&gt;game-loop&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
  (cls) &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;; clear view each frame&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;  (text &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;2 2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; (frame))) &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;; print view each frame, with the frame number as text&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;; 128px window runing a loop at 60frame&#x2F;s speed&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(run game-loop &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;128 128&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Oh no! &lt;code&gt;r-cade&lt;&#x2F;code&gt; is not know by DrRacket. Thankfully the error provides me with a link to install it... which works directly.&lt;&#x2F;p&gt;
&lt;p&gt;Oh no! &lt;code&gt;r-cade&lt;&#x2F;code&gt; needs some dependencies on windows to run!&lt;br &#x2F;&gt;
It&#x27;s well documented &lt;a href=&quot;https:&#x2F;&#x2F;r-cade.io&#x2F;setup&quot;&gt;here&lt;&#x2F;a&gt;. I therefore install &lt;a href=&quot;https:&#x2F;&#x2F;www.sfml-dev.org&#x2F;download&#x2F;csfml&#x2F;&quot;&gt;csfml&lt;&#x2F;a&gt; (I unzip it in a freshly made &lt;code&gt;C:\other_program\csfml&lt;&#x2F;code&gt; folder to be sure not to pollute my computer), and add the path to the Windows Path environment variable.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;blog&#x2F;2021-09-08-one_day_with_racket&#x2F;img&#x2F;15-env_csfml.png&quot; alt=&quot;env csfml&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;I had to install &lt;a href=&quot;https:&#x2F;&#x2F;www.openal.org&#x2F;downloads&#x2F;&quot;&gt;OpenAL&lt;&#x2F;a&gt; as well, then fully restart DrRacket to be able to run my sample.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;blog&#x2F;2021-09-08-one_day_with_racket&#x2F;img&#x2F;16-r-cade.png&quot; alt=&quot;r-cade&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;snake-specifications&quot;&gt;Snake Specifications&lt;&#x2F;h3&gt;
&lt;p&gt;What is a Snake Game? Here is my very opinionated vision of a simplified version:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;a 20x20 grid, made of tiles that have x&#x2F;y coordinates&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;a tile can be:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;a wall tile (all edges)&lt;&#x2F;li&gt;
&lt;li&gt;an apple tile&lt;&#x2F;li&gt;
&lt;li&gt;a part of the snake: a snake-tile&lt;&#x2F;li&gt;
&lt;li&gt;a blank-tile&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;the snake:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;is made of 1+ consecutive snake-tiles&lt;&#x2F;li&gt;
&lt;li&gt;is always moving in the previously set direction (every 500ms)&lt;&#x2F;li&gt;
&lt;li&gt;the head can take any cardinal direction (NESW)&lt;&#x2F;li&gt;
&lt;li&gt;the body follows the head&lt;&#x2F;li&gt;
&lt;li&gt;when the head collides an apple-tile:
&lt;ul&gt;
&lt;li&gt;the apple disapears&lt;&#x2F;li&gt;
&lt;li&gt;the snake grows by 1¬†snake-tile&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;when the head collides a wall-tile or snake-tile: Game Over.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;apples:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;there is always one in a random position in the field&lt;&#x2F;li&gt;
&lt;li&gt;if it&#x27;s eaten, it disappears and a new one pops on a ramdom empty tile&lt;&#x2F;li&gt;
&lt;li&gt;if there is no empty tile left: Game Over&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;implementation&quot;&gt;Implementation&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;window-and-walls&quot;&gt;Window And Walls&lt;&#x2F;h4&gt;
&lt;p&gt;Let&#x27;s try to make a 20x20¬†window with 4 walls.&lt;br &#x2F;&gt;
Sadly, I know nothing about videogame development.&lt;br &#x2F;&gt;
My first reflex is just to draw walls as such:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;#lang racket&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;require &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;r-cade)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;define&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5cb3fa;&quot;&gt;game-loop&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
  (cls)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
  (begin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
    (color &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
    (rect &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;0 0 20 1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; #:fill &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;#t&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;)))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;; and so on for all stuff to draw&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;  (run game-loop grid-size grid-size)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This will draw on top-left a 1x20 sized rectangle, filled with a brown color.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;blog&#x2F;2021-09-08-one_day_with_racket&#x2F;img&#x2F;17-r-cade_rect.png&quot; alt=&quot;r-cade rect&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Do you remember about &lt;code&gt;begin&lt;&#x2F;code&gt;, allowing a series of functions?&lt;&#x2F;p&gt;
&lt;p&gt;I execute first the function &lt;code&gt;color&lt;&#x2F;code&gt; to pick a color in a &lt;a href=&quot;https:&#x2F;&#x2F;docs.racket-lang.org&#x2F;r-cade&#x2F;index.html?q=r-cade#%28def._%28%28lib._r-cade%2Fmain..rkt%29._color%29%29&quot;&gt;16 colors palette&lt;&#x2F;a&gt; (4 = brown) for the next steps.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;rect&lt;&#x2F;code&gt; takes &lt;code&gt;x y&lt;&#x2F;code&gt; coordinates, &lt;code&gt;h w&lt;&#x2F;code&gt; sizes, and this strange &lt;code&gt;#:fill #t&lt;&#x2F;code&gt;. It&#x27;s a &amp;quot;fill&amp;quot; unordered named argument (how smart!) that takes the value &lt;code&gt;True&lt;&#x2F;code&gt; or &lt;code&gt;False&lt;&#x2F;code&gt;: &lt;code&gt;#t&lt;&#x2F;code&gt; or &lt;code&gt;#f&lt;&#x2F;code&gt; in Racket.&lt;&#x2F;p&gt;
&lt;p&gt;I then continue with other walls, apples and a snake. But this method is a dead end because it doesn&#x27;t track anything. It just produces a picture without state, without life.&lt;&#x2F;p&gt;
&lt;p&gt;What I really want is a representation of the state of the game, that can change and be re-drawn. A grid with the state of all its tiles.&lt;&#x2F;p&gt;
&lt;p&gt;I opt for a grid that is a list of lists: (rows) containing tiles (cells). A tile will be a tuple (a list with a few ordered members): (coord-x coord-y tile-type), like &lt;code&gt;(12 3 &amp;quot;apple&amp;quot;)&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Each game frame of the main loop will draw this grid, finding the current state of each tile.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;;; grid values&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;define &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;grid-size &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;20&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;define &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;grid&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
  (build-list&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
   grid-size&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
   (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;lambda &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(y)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
     (build-list grid-size (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;lambda &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(x) (list x y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;blank&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;))))))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here &lt;code&gt;build-list n value-as-lambda&lt;&#x2F;code&gt; creates a list of n items with cohesive values. Thoses values are based on a &lt;code&gt;lambda&lt;&#x2F;code&gt;: an anonymous and temporary function to call for the creation of the value. The lambda takes the current index as argument. In fact, I operate in nested lists to obtain this full grid of &lt;code&gt;(x y tile-type)&lt;&#x2F;code&gt; tuples.&lt;&#x2F;p&gt;
&lt;p&gt;Now, my wall&#x27;s definition:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;; wall definition&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;define &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;max-grid-index (- grid-size &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;define &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;wall-coords&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
  (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;([top (build-list grid-size (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;lambda &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(x)(list x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;)))]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
        [bottom (build-list grid-size (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;lambda &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(x)(list x max-grid-index)))]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
        [left (build-list (- grid-size &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;) (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;lambda &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(y)(list &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; (+ y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;))))]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
        [right (build-list (- grid-size &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;) (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;lambda &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(y)(list max-grid-index (+ y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;))))]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
        )&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
    (append top bottom left right)))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Nothing new here except for this &lt;code&gt;append&lt;&#x2F;code&gt; used to concatenate lists.
But where is the glue? How do I update the grid ?&lt;&#x2F;p&gt;
&lt;p&gt;In functional programming in general, you avoid state, mutability and side effects. But my approach of this game implies a changing state:¬†the grid.
&lt;code&gt;(set! var-name new-value)&lt;&#x2F;code&gt; is the way to proceed. &lt;code&gt;for-each&lt;&#x2F;code&gt;, &lt;code&gt;list-update&lt;&#x2F;code&gt;, &lt;code&gt;list-set&lt;&#x2F;code&gt; are identifiers coming from &lt;a href=&quot;https:&#x2F;&#x2F;docs.racket-lang.org&#x2F;reference&#x2F;pairs.html&quot;&gt;list docs&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;; -- update 1 tile in grid&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;define&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5cb3fa;&quot;&gt;update-tile &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;coord val)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
  (let* ([row-idx (list-ref coord &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;)]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
         [cell-idx (list-ref coord &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;)]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
         [row (list-ref grid row-idx )]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
         [tile (list-ref row cell-idx)]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
         [updated (list-set tile &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; val)])&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
    (set!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
     grid (list-set grid row-idx&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
                    (list-set row cell-idx updated)))))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;; -- update a list of tiles&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;define&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5cb3fa;&quot;&gt;update-tiles &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;coords val)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
  (for-each&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
   (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;lambda &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(coord)(update-tile coord val))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
   coords))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;What I need now is a function to draw that on the window:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;; draw definitions&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;define&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5cb3fa;&quot;&gt;color-code &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;tile-type)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
  (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;tile-type&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
    [(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;wall&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
    [(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;snake&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;11&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
    [(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;apple&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
    [else &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;7&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;]))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;; -- draw colored grid on screen with&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;define&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5cb3fa;&quot;&gt;draw-grid &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;grid)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
  (for-each&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
   (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;lambda &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(row)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
     (for-each&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
      (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;lambda &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(tile)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
        (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;([type (list-ref tile &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;)]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
              [x (list-ref tile &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;)]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
              [y (list-ref tile &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;)])&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
          (begin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
            (color (color-code type))&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;; color setted for next function&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;            (rect x y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;1 1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; #:fill &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;#t&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;))))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
      row))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
   grid))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;; game definitions&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;define&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5cb3fa;&quot;&gt;game-loop&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
  (cls)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
  (begin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
    (draw-grid grid)))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;; procedure&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(update-tiles wall-coords &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;wall&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
(run game-loop grid-size grid-size)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I just produced a brown rectangle (or other colors) for each related info we have in the grid.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;blog&#x2F;2021-09-08-one_day_with_racket&#x2F;img&#x2F;18-r-cade_walls.png&quot; alt=&quot;r-cade walls&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;hmm... 8:12 PM - Let&#x27;s take a final pause for dinner. I have some doubts about my ability to finish this challenge in time...
But I have hope acting as fuel!
I want to brag at work tomorrow, so failing is not an option.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h4 id=&quot;the-snake&quot;&gt;The Snake&lt;&#x2F;h4&gt;
&lt;h5 id=&quot;show-it&quot;&gt;Show it&lt;&#x2F;h5&gt;
&lt;p&gt;I want a centered snake, so I change my grid size to 21. The center should be (10 10) and I calculate it (because I want to be able to change the size of my grid).&lt;&#x2F;p&gt;
&lt;p&gt;If I want it to move 2 times per second, I have to change the framerate too.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;define &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;grid-size &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;21&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;; ...&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;
; snake definitions&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;define &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;snake-coords&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
  (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;([val (round (- ( &#x2F; grid-size &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;))])&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
    (list val val)))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;; procedure&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(update-tiles wall-coords &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;wall&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
(update-tile snake-coords &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;snake&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
(run game-loop grid-size grid-size #:fps &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;blog&#x2F;2021-09-08-one_day_with_racket&#x2F;img&#x2F;19-r-cade_snake.png&quot; alt=&quot;r-cade snake&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h5 id=&quot;move-it&quot;&gt;Move it&lt;&#x2F;h5&gt;
&lt;p&gt;A move will happen just after each draw. What I want to do is make the head of the snake follow a direction with each re-draw, until a given event.&lt;&#x2F;p&gt;
&lt;p&gt;For now, it simply goes like:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;define&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5cb3fa;&quot;&gt;snake-position-update&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
  (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;begin &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(update-tile snake-coords &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;blank&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
         (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;[(new-coords (list (list-ref snake-coords &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;) (- (list-ref snake-coords &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;)))]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
           (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;set! &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;snake-coords new-coords)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
           (update-tile new-coords &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;snake&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;))))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;;...&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;; game definitions&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;define&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5cb3fa;&quot;&gt;game-loop&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
  (cls)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
  (snake-position-update)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
  (draw-grid grid))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;What about a collision with a wall?&lt;br &#x2F;&gt;
I can use &lt;code&gt;quit&lt;&#x2F;code&gt;, which stops the game when it occurs.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;define&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5cb3fa;&quot;&gt;snake-position-update&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
  (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;begin &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(update-tile snake-coords &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;blank&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
         (let* ([new-coords (list (list-ref snake-coords &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;) (- (list-ref snake-coords &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;))]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
                [next-tile (read-tile new-coords)])&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
           (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(equal? (list-ref next-tile &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;blank&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
               (begin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
                 (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;set! &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;snake-coords new-coords)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
                 (update-tile new-coords &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;snake&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
               (quit)))))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h5 id=&quot;control-it&quot;&gt;Control it&lt;&#x2F;h5&gt;
&lt;p&gt;I suspect an awesome lang like r-cade to embed everything I need to change the direction of the snake when an arrow is pressed.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;define &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;snake-direction &amp;quot;top&amp;quot;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;define&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5cb3fa;&quot;&gt;move &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;direction) (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;set! &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;snake-direction direction))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;define&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5cb3fa;&quot;&gt;snake-action&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
  (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;([direction (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;cond &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;[(btn-up) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;up&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
                         [(btn-right) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;right&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
                         [(btn-down) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;down&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
                         [(btn-left) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;left&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
                         [else snake-direction])])&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
    (move direction)))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Isn&#x27;t it self explanatory?&lt;br &#x2F;&gt;
When &lt;code&gt;snake-action&lt;&#x2F;code&gt; is called, check which button is currently pressed and move in the related direction.&lt;br &#x2F;&gt;
I just have to plug it in the loop and wait to see the effect!&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;define&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5cb3fa;&quot;&gt;game-loop&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
  (cls)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
  (snake-action)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
  (snake-position-update)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
  (draw-grid grid))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I&#x27;m getting ready for the final step: making the move itself depend on this direction.
I just have to adujst the next &lt;code&gt;x&lt;&#x2F;code&gt; and &lt;code&gt;y&lt;&#x2F;code&gt; accordingly.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;;; snake update&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;define&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5cb3fa;&quot;&gt;snake-position-update&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
  (begin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
    (update-tile snake-coords &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;blank&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
    (let*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
        ([x (list-ref snake-coords &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;)]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
         [y (list-ref snake-coords &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;)]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
         [new-coords&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
          (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;snake-direction&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
            [(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;top&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;)(list x (- y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;))]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
            [(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;down&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;)(list x (+ y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;))]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
            [(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;right&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;)(list (+ x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;) y)]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
            [(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;left&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;)(list (- x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;) y)]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
            [else (list x (- y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;))])]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
         [next-tile (read-tile new-coords)])&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
      (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(equal? (list-ref next-tile &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;blank&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
          (begin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
            (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;set! &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;snake-coords new-coords)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
            (update-tile new-coords &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;snake&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
          (quit)))))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;blog&#x2F;2021-09-08-one_day_with_racket&#x2F;img&#x2F;20-r-cade_move.png&quot; alt=&quot;r-cade move&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;And... it works well, despite the fact that the loop reiterates every 500ms, which is not enough to get all the inputs if I press the buttons too quickly.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;; game definitions&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;define &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;game-speed &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;define&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5cb3fa;&quot;&gt;game-loop&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
  (cls)&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;; clear screen&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;  (snake-action)&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;; get user inputs&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;  (when&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
      (=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
       (modulo (frame) (&#x2F; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;60&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; game-speed))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
    (snake-position-update))&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;; change snake position&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;  (draw-grid grid))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;; procedure&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(update-tiles wall-coords &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;wall&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
(update-tile snake-coords &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;snake&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
(run game-loop grid-size grid-size #:fps &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;60&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;To ensure every &lt;code&gt;keypress&lt;&#x2F;code&gt; event is taken, I revert the fps to 60,
then define a game-speed that will slow the view&#x27;s update process.
&lt;code&gt;when&lt;&#x2F;code&gt; is what you find when you search for &amp;quot;if without else in racket&amp;quot;.
The &lt;code&gt;modulo&lt;&#x2F;code&gt; makes the update &amp;quot;sleep&amp;quot; every turn except during the chosen one.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;It&#x27;s 10:20 PM and I still haven&#x27;t reached the main complexity of the snake problem.
I can&#x27;t sleep with that it mind, so I&#x27;ll continue. As usual in computer science: devil is in the details, and estimation is fortune telling.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h4 id=&quot;apples&quot;&gt;Apples&lt;&#x2F;h4&gt;
&lt;p&gt;The specs I made say that there is always only one apple in the field, that could get eaten by the snake:¬†in this case a new one will pop. But it has to pop on a blank tile, so I suspect I will need something like:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;;;; read 1 tile&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;define&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5cb3fa;&quot;&gt;read-tile &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;coord)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
  (let* ([row (list-ref grid (list-ref coord &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;))]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
         [tile (list-ref row (list-ref coord &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;))])&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
    tile))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;;;; check if a tile is blank&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;define&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5cb3fa;&quot;&gt;is-tile-blank &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;coords)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
  (let* ([tile (read-tile coords)]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
         [type (list-ref tile &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;)])&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
    (equal? type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;blank&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;)))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I will also need some randomisation here. You can imagine it exists in &lt;code&gt;racket&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;; apples&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;define&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5cb3fa;&quot;&gt;draw-random-apple&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
  (let* ([x (random &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;1 20&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;)]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
         [y (random &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;1 20&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;)]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
         [coords (list x y)])&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
    (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(is-tile-blank coords)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
        (update-tile coords &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;apple&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
        (draw-random-apple))))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;;...&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(draw-random-apple)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
(run game-loop grid-size grid-size #:fps &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;60&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;blog&#x2F;2021-09-08-one_day_with_racket&#x2F;img&#x2F;21-r-cade_apple.png&quot; alt=&quot;r-cade apple&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Recursion acts as a loop here: until the coordinates are not a blank tile, try again.&lt;&#x2F;p&gt;
&lt;p&gt;When it&#x27;s a blank tile, I get the result. I just need to make sure to draw one before the start. Here we go.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;collisions&quot;&gt;Collisions&lt;&#x2F;h4&gt;
&lt;p&gt;When the snake meets an apple:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;the apple is removed&lt;&#x2F;li&gt;
&lt;li&gt;the snake grows&lt;&#x2F;li&gt;
&lt;li&gt;a new apple pops&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The first and second step could be a common step: replace the apple with a snake part.
I will change the name of &lt;code&gt;snake-update-position&lt;&#x2F;code&gt; to &lt;code&gt;game-update&lt;&#x2F;code&gt; which reflects the situation better.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;define&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5cb3fa;&quot;&gt;game-update&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
  (begin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
    (update-tile snake-coords &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;blank&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
    (let*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
        ([x (list-ref snake-coords &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;)]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
         [y (list-ref snake-coords &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;)]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
         [new-coords&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
          (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;snake-direction&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
            [(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;top&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;)(list x (- y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;))]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
            [(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;down&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;)(list x (+ y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;))]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
            [(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;right&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;)(list (+ x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;) y)]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
            [(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;left&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;)(list (- x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;) y)]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
            [else (list x (- y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;))])])&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
      (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;cond &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;[(is-tile-blank new-coords)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
             (begin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
               (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;set! &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;snake-coords new-coords)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
               (update-tile new-coords &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;snake&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;))]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
            [(is-tile-apple new-coords)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
             (begin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
               (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;set! &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;snake-coords new-coords)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
               (update-tile new-coords &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;snake&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
               (draw-random-apple))]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
            [else (quit)]))))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Works well... until I remember that the snake should grow.&lt;br &#x2F;&gt;
And this part sounds to me like it&#x27;s the real complexity: now the snake has to be a list of coordinates following each other and not just a point.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Late, so late, I&#x27;m tired. I&#x27;ll try, but I can&#x27;t promise anything.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Snake as a list:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;; snake definitions&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;define &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;snake-coords&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
  (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;([val (round (- ( &#x2F; grid-size &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;))])&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
    (list (list val val))))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;define &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;snake-direction &amp;quot;top&amp;quot;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now, let&#x27;s replace all&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(update-tile snake-coords &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;snake&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;with (see the extra &amp;quot;s&amp;quot; ?)&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(update-tiles snake-coords &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;snake&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;and&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(list-ref snake-coords 0)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;with&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(list-ref (first snake-coords) 0)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Indeed, &lt;code&gt;first&lt;&#x2F;code&gt; returns the first element of a list.&lt;&#x2F;p&gt;
&lt;p&gt;Amazingly, it works!&lt;&#x2F;p&gt;
&lt;p&gt;Now, the part that makes me afraid. For the snake to grow, I need to add a tail to the list just after the moment it eats an apple.&lt;&#x2F;p&gt;
&lt;p&gt;The snake is now a list of coordinates, following each other. When the snake moves, a new coordinate will replace the head of this list, and the tail of this list will disappear. So the re-draw will reflect this list shift.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;cond &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;[(is-tile-blank new-coords)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
        (begin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
          (update-tile (last snake-coords) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;blank&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
          (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;set! &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;snake-coords&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
                (drop-right&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
                (append (list new-coords) snake-coords) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
          (update-tiles snake-coords &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;snake&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;))]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
      [(is-tile-apple new-coords)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
        (begin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
          (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;set! &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;snake-coords&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
                (append (list new-coords) snake-coords))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
          (update-tiles snake-coords &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;snake&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
          (draw-random-apple))]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
      [else (quit)])))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here I have &lt;code&gt;append&lt;&#x2F;code&gt; to update the list &amp;quot;immutably&amp;quot; and &lt;code&gt;drop-right&lt;&#x2F;code&gt; to do the &amp;quot;remove&amp;quot; job. In other words, I do some insert first&#x2F;remove last, treating the snake like a &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Linked_list&quot;&gt;linked list&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;blog&#x2F;2021-09-08-one_day_with_racket&#x2F;img&#x2F;22-r-cade_size.png&quot; alt=&quot;r-cade size&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The very last shortcoming is the fact that when I press the opposite direction of the current one, the game quits.&lt;br &#x2F;&gt;
Indeed, the snake eats itself, because the tail of the snake is here.&lt;&#x2F;p&gt;
&lt;p&gt;I want to prevent the user to go back, so I&#x27;ll add a condition that says &amp;quot;depending your current direction, you can&#x27;t go back&amp;quot;.&lt;br &#x2F;&gt;
The logic looks like:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;define &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;snake-direction &amp;quot;up&amp;quot;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;define &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;opposite-direction &amp;quot;down&amp;quot;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;define&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5cb3fa;&quot;&gt;set-opposite-direction &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;dir)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
  (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;set! &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;opposite-direction&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
        (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;dir&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
          [(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;up&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;down&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
          [(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;right&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;left&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
          [(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;down&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;up&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
          [(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;left&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;right&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;])))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then in &lt;code&gt;game-update&lt;&#x2F;code&gt;, when the move is done:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;cond &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;[(is-tile-blank new-coords)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
        (begin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
          (update-tile (last snake-coords) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;blank&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
          (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;set! &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;snake-coords (drop-right new-snake &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
          (update-tiles snake-coords &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;snake&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
          (set-opposite-direction snake-direction))]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
      [(is-tile-apple new-coords)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
        (begin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
          (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;set! &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;snake-coords new-snake)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
          (update-tiles snake-coords &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;snake&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
          (set-opposite-direction snake-direction)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
          (draw-random-apple))]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
      [else (quit)])))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here we go! A real snake game, made with racket, working properly!
Happiness fills my soul and my tired body.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;blog&#x2F;2021-09-08-one_day_with_racket&#x2F;img&#x2F;23-r-cade_final-snake.png&quot; alt=&quot;r-cade final-snake&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;00:01 AM - it was a long, but also an amazing and rewarding experience.
Racket brings simplicity, expressiveness and well-made baked-in community DSLs on the table.&lt;&#x2F;p&gt;
&lt;p&gt;Before publishing this article, I&#x27;ll take the time to refactor my final code. You can find it on &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ltruchot&#x2F;1day&#x2F;tree&#x2F;master&#x2F;racket&quot;&gt;this github repository&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;ll also find resources to go further to share. Thank you for your reading me, following me, sharing this piece and for your patience during this looooong journey.&lt;&#x2F;p&gt;
&lt;p&gt;Hope to see you soon!&lt;&#x2F;p&gt;
&lt;p&gt;Lo√Øc TRUCHOT&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;em&gt;proofreading &amp;amp; revisions by &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;joruonk&quot;&gt;Jordane Frechet&lt;&#x2F;a&gt;&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;resources-to-go-further&quot;&gt;Resources to go further&lt;&#x2F;h2&gt;
&lt;p&gt;I just discovered this language and this LISP world, but after one day with racket,
I decided to dive a little more into podcasts and videos. Here is what I found.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;On YouTube:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=z8Pz4bJV3Tk&quot;&gt;Language-Oriented Programming with Racket - Matthias Felleisen&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;youtu.be&#x2F;wr4eqx3UYPc?t=319&quot;&gt;Lisp with Uncle Bob Martin&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=GbZpTHg0KfQ&quot;&gt;Lisp: A language for stratified design&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
        </item>
        <item>
            <title>CV</title>
            <pubDate>Wed, 16 Sep 2020 00:00:00 +0000</pubDate>
            <link>https://loic.truchot.dev/cv/</link>
            <guid>https://loic.truchot.dev/cv/</guid>
            <description>&lt;h2 id=&quot;professional-websites&quot;&gt;Professional websites&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;[Since 2019] As a freelancer (Smart, Itenium)&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.partena-professional.be&#x2F;&quot;&gt;Partena Professional&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;lucidweb.pro&#x2F;&quot;&gt;Lucidweb Pro&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;[2015 - 2019] As an employee (Adneom)&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;wearetennis.bnpparibas&#x2F;&quot;&gt;We Are Tennis&lt;&#x2F;a&gt; (Official Roland Garros)&lt;&#x2F;li&gt;
&lt;li&gt;ITQI&lt;&#x2F;li&gt;
&lt;li&gt;FFBB (app), EmaSphere (app), Aston, Promar, BX1, Becheck, Sweepen, AdneomApp&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;[2015] As a freelancer (Noesis, Smart)&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Soixante Circuits&lt;&#x2F;li&gt;
&lt;li&gt;Souther Laos&lt;&#x2F;li&gt;
&lt;li&gt;CommSystems&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;[2013 - 2015] As an employee (SII)&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;video-a-la-demande.orange.fr&#x2F;&quot;&gt;Orange: WebTV&lt;&#x2F;a&gt; (official streaming &amp;amp; VOD)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;side-projects&quot;&gt;Side projects&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;[2020] &lt;a href=&quot;https:&#x2F;&#x2F;loic.truchot.dev&quot;&gt;Personal blog (here!)&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;[2020] &lt;a href=&quot;https:&#x2F;&#x2F;aiku.wtf&quot;&gt;Aiku&lt;&#x2F;a&gt; (Artificial Poetry in French)&lt;&#x2F;li&gt;
&lt;li&gt;[2020] &lt;a href=&quot;https:&#x2F;&#x2F;autoquizz.com&quot;&gt;AutoQuizz&lt;&#x2F;a&gt; (Belgian Wildlife Quizz)&lt;&#x2F;li&gt;
&lt;li&gt;[2018] Committers&lt;&#x2F;li&gt;
&lt;li&gt;[2017] Laolol, Laonetics&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;open-source-contributions&quot;&gt;Open source contributions&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;[2013 - 2020] &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ltruchot&quot;&gt;Main github profile&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
        </item>
        <item>
            <title>Podcast</title>
            <pubDate>Tue, 15 Sep 2020 00:00:00 +0000</pubDate>
            <link>https://loic.truchot.dev/podcast/</link>
            <guid>https://loic.truchot.dev/podcast/</guid>
            <description>&lt;p&gt;Since September 2020, I have been working on my own podcast: &lt;strong&gt;JavaScript en For√™t&lt;&#x2F;strong&gt;. It&#x27;s &lt;strong&gt;in French&lt;&#x2F;strong&gt;, and it describe JavaScript and my thoughts on it, for students and the curious.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;javascript-en-foret&quot;&gt;JavaScript en For√™t&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Spotify: &lt;a href=&quot;https:&#x2F;&#x2F;open.spotify.com&#x2F;show&#x2F;513Qnxxm8Y0mUPM9Z4xamP&quot;&gt;https:&#x2F;&#x2F;open.spotify.com&#x2F;show&#x2F;513Qnxxm8Y0mUPM9Z4xamP&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Google Podcasts:&lt;&#x2F;li&gt;
&lt;li&gt;Apple Podcasts: &lt;a href=&quot;https:&#x2F;&#x2F;podcasts.apple.com&#x2F;be&#x2F;podcast&#x2F;javascript-en-for%C3%AAt&#x2F;id1531845055&quot;&gt;https:&#x2F;&#x2F;podcasts.apple.com&#x2F;be&#x2F;podcast&#x2F;javascript-en-for%C3%AAt&#x2F;id1531845055&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Podcloud: &lt;a href=&quot;https:&#x2F;&#x2F;podcloud.fr&#x2F;podcast&#x2F;javascript-en-foret&quot;&gt;https:&#x2F;&#x2F;podcloud.fr&#x2F;podcast&#x2F;javascript-en-foret&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;my-favorite-podcasts-a-curated-list&quot;&gt;My favorite podcasts: a curated list&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;programming-and-it&quot;&gt;Programming and IT&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;in-french&quot;&gt;In French&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Script&lt;&#x2F;strong&gt;, &lt;em&gt;Bigaston&lt;&#x2F;em&gt;: Introduction niveau d√©butant √† des langages de programmation&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;in-english&quot;&gt;In English&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Programming&lt;&#x2F;strong&gt;, &lt;em&gt;Minko Gechev&lt;&#x2F;em&gt;: Very formal Computer Science subjects, one by one&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;The Women In Tech Show&lt;&#x2F;strong&gt;, &lt;em&gt;Edaena Salinas&lt;&#x2F;em&gt;: Any CS + techs subjects by interviewing women&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Ladybug&lt;&#x2F;strong&gt;: Programming subject, explained by women&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;functional-programming&quot;&gt;Functional Programming&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;in-english-1&quot;&gt;In English&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Thoughts on functional programming&lt;&#x2F;strong&gt;, &lt;em&gt;Eric Normand&lt;&#x2F;em&gt;: An open monologue on functional programming, full of relevant advice, analogies and examples&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Corecursive&lt;&#x2F;strong&gt;, &lt;em&gt;Adam Gordon Bell&lt;&#x2F;em&gt;: Lots of prestigious guests on all CS topics (but often related to functional programming)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Functional Geekery&lt;&#x2F;strong&gt;, &lt;em&gt;Proctor&lt;&#x2F;em&gt;: Lots of prestigious guests only about functional programming&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;LambdaCast&lt;&#x2F;strong&gt;, &lt;em&gt;LambdaCast&lt;&#x2F;em&gt;: Discover FP topic by topic, abstraction by abstraction&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
        </item>
        <item>
            <title>Cure Impostor Syndrome with Functional Programming</title>
            <pubDate>Sat, 29 Jun 2019 00:00:00 +0000</pubDate>
            <link>https://loic.truchot.dev/blog/cure-impostor-syndrome-with-functional-programming/</link>
            <guid>https://loic.truchot.dev/blog/cure-impostor-syndrome-with-functional-programming/</guid>
            <description>&lt;p&gt;Ten years of web development made me feel like Neo, before he met Morpheus. Something was wrong in this world. I had some clues, but I couldn&#x27;t explain exactly what it was.&lt;&#x2F;p&gt;
&lt;p&gt;My everyday language was JavaScript. I eventually decided to become a teacher and explain how to make real-world webapps to beginners and juniors.&lt;&#x2F;p&gt;
&lt;p&gt;I didn&#x27;t switch careers because I felt established, in fact, it was the opposite. I wanted to be a teacher so I could upgrade my skills, question them, and cure my own impostor syndrome.&lt;&#x2F;p&gt;
&lt;p&gt;Who, after a degree and ten years of practice in a field, can feel like an impostor; an eternal newbie? Programmers, of course.&lt;&#x2F;p&gt;
&lt;p&gt;But why? I&#x27;ll try to explain what I discovered.&lt;&#x2F;p&gt;
&lt;p&gt;I used to start my programming lessons with something like: &amp;quot;You don&#x27;t need maths at all to be a good programmer. We need problem solvers.&amp;quot;&lt;&#x2F;p&gt;
&lt;p&gt;And of course: &amp;quot;There is a tool for everything. You don&#x27;t even need to be a good coder if you know where to find, and use, the right resources.&amp;quot;&lt;&#x2F;p&gt;
&lt;p&gt;And even: &amp;quot;As the industry is changing so fast, you have to learn a framework per year to keep up with the trends.&amp;quot;&lt;&#x2F;p&gt;
&lt;p&gt;When we speak about quality, I always promote wisely-chosen camelCase variable names. When someone asks me why the web is so messy, I describe JavaScript&#x27;s weaknesses and fatigue (JS, a language that nobody learns), coders&#x27; laziness, lack of tests&#x2F;DevOps&#x2F;design patterns&#x2F;quality tools, etc.&lt;&#x2F;p&gt;
&lt;p&gt;When it comes to impostor syndrome, even if I suffer from it, I just try to reassure people to: &amp;quot;Continue to deliver apps, it&#x27;s in your head, it will vanish with your achievements.&amp;quot;&lt;&#x2F;p&gt;
&lt;p&gt;Yet, my impostor syndrome didn&#x27;t vanish in time‚Ää-‚Äämy achievements did.&lt;&#x2F;p&gt;
&lt;p&gt;The entirety of my websites and apps disappeared. My first PHP &amp;amp; ASP.NET custom CMS, my Java &amp;amp; early Node back ends, my jQuery plugins, my Dojo apps, my Ruby on Rails projects, my AngularJS landing pages and Ionic mobile apps, even my recent work with Vue 1, Angular 2 beta and early React are not online anymore.&lt;&#x2F;p&gt;
&lt;p&gt;And I know why. Those projects were too big to change and too buggy‚Ää-‚Ääthe technology was perishable, investment flow was inconsistent, and the new coders were too inexperienced to grow the existing codebase.&lt;&#x2F;p&gt;
&lt;p&gt;Even the work done with the best practices are lost, dead and burning in (callback) hell. DDD, design patterns, API, microservices, TDD, linters + prettiers, comments, GitFlow, best frameworks and libraries, Docker, CI&#x2F;CD and DevOps, KISS, Redux, ReactiveX, Agile management, task runners and transpilers, pair programming and reviews, etc.&lt;&#x2F;p&gt;
&lt;p&gt;We tried everything. But after all of that, something in the projects is still bad. The codebases will continue to be updated until it&#x27;s too big; then we want to re-code it from scratch. It&#x27;s obviously a vicious circle.&lt;&#x2F;p&gt;
&lt;p&gt;What if I was wrong all this time? Ten years of errors?&lt;&#x2F;p&gt;
&lt;p&gt;What if there is a different explanation for the mess we made in web development, and in computer science in general?&lt;&#x2F;p&gt;
&lt;p&gt;What if the thing we missed was in fact the exact opposite of what I was teaching?&lt;&#x2F;p&gt;
&lt;p&gt;If so let&#x27;s reverse the instructions.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Stop trying to solve the problem as enthusiastic monkey patchers.&lt;&#x2F;li&gt;
&lt;li&gt;Stop combining unreliable tools without knowing the basics.&lt;&#x2F;li&gt;
&lt;li&gt;Stop placing every code in cages, terrorized by the monsters we know we will create.&lt;&#x2F;li&gt;
&lt;li&gt;Stop filling the endless void with more code.&lt;&#x2F;li&gt;
&lt;li&gt;Stop choosing names or developing static APIs bound to versatile problems, with perishable purpose.&lt;&#x2F;li&gt;
&lt;li&gt;Stop developing new data structures, without expressing the potential of existing ones.&lt;&#x2F;li&gt;
&lt;li&gt;Stop changing technology, frameworks and code base every month‚Ää-‚Äämodify them in a way that they&#x27;ll be more reliable and usable in 10 years time.&lt;&#x2F;li&gt;
&lt;li&gt;Stop being an impostor.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;functional-programming&quot;&gt;Functional Programming&lt;&#x2F;h2&gt;
&lt;p&gt;Have you heard about functional programming?&lt;&#x2F;p&gt;
&lt;p&gt;Yes of course, because every big language, company, and thought leader has taken steps in this direction for a few years now.&lt;&#x2F;p&gt;
&lt;p&gt;But what is Functional Programming about?&lt;&#x2F;p&gt;
&lt;p&gt;Two years ago, I went to my nearest university library, trying to find books about monads, Lambda calculus, semigroups, combinators, linear algebra, higher-order functions, and others subjects that pops when we discover FP.&lt;&#x2F;p&gt;
&lt;p&gt;I was naively searching for computer science books and found nothing.&lt;&#x2F;p&gt;
&lt;p&gt;A few weeks ago, I went to the same place for a book about Boolean algebra, to prepare for class.&lt;&#x2F;p&gt;
&lt;p&gt;The library assistant took me to the mathematics shelves, and there I discovered the Grail‚Ää-‚Ää50 old books about everything you can find in the fantasy-land of Functional Programming.&lt;&#x2F;p&gt;
&lt;p&gt;Mono√Øds, and the operations you can do with them, were clearly explained in the first dusty book I opened.&lt;&#x2F;p&gt;
&lt;p&gt;It was a moment of enlightenment, the Morpheus pill was this shelf. The answer I was searching since 10 years was incredibly simple: &amp;quot;math matters&amp;quot;. I still don&#x27;t understand everything about Mono√Øds, but I can clearly see the path now, with the green characters of the matrix falling all around me.&lt;&#x2F;p&gt;
&lt;p&gt;Why don&#x27;t programs work?&lt;&#x2F;p&gt;
&lt;p&gt;Why do we need to completely rewrite them every two years?&lt;&#x2F;p&gt;
&lt;p&gt;Because they lack mathematics. Of course.&lt;&#x2F;p&gt;
&lt;p&gt;We want to manipulate the &amp;quot;zero&amp;quot; and the &amp;quot;one&amp;quot; all day, but we don&#x27;t even know about simple (Boolean) algebra like identity, commutativity, associability, idempotency, etc.&lt;&#x2F;p&gt;
&lt;p&gt;Problem solving is not the skill‚Ää-‚Ääspending your time reinventing and patching (even smartly) will still increase the codebase, creating a form of &amp;quot;technical debt&amp;quot; that nobody wants to pay.&lt;&#x2F;p&gt;
&lt;p&gt;So what do we need?&lt;&#x2F;p&gt;
&lt;p&gt;What we need is less code.&lt;&#x2F;p&gt;
&lt;p&gt;What we need is proof that it works. Not &amp;quot;TDD proof&amp;quot; that is costly, but an approach that will surely solve every case.&lt;&#x2F;p&gt;
&lt;p&gt;What we need is a scalability level that doesn&#x27;t require any name for variables other than a, b, or c. Our functions will be so simple, so generic, so stable, so composable, so future-proof that they can be read and use the same way now and in 30 years.&lt;&#x2F;p&gt;
&lt;p&gt;What we need isn&#x27;t artificial limits and tools everywhere to avoid bad code or bad practices, but algebra everywhere.&lt;&#x2F;p&gt;
&lt;p&gt;What we need is to stop being impostors, and eventually begin to think for the computer, think like it. This machine we are programming, this concept of being able to cleverly calculate everything. It will be hard. At least it&#x27;s tough for me.&lt;&#x2F;p&gt;
&lt;p&gt;What does a computer do when it&#x27;s powered up?&lt;&#x2F;p&gt;
&lt;p&gt;It takes data from DD as input, and computes it as outputs that our devices need. Then, it waits for new inputs, allowing us to develop programs or apps to map certain outputs again.
There are only two cases:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;If it&#x27;s already computed then we just need memory.&lt;&#x2F;li&gt;
&lt;li&gt;If it will be computed we need a function.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Why did we take something so simple and complicate it? Instead of learning math, we chose to invent a cryptic world of pop-cultured languages and tools that can more or less solve any kind of problem.&lt;&#x2F;p&gt;
&lt;p&gt;Every time we try to play it by ear we create more problems.&lt;&#x2F;p&gt;
&lt;p&gt;It&#x27;s bug oriented programming.&lt;&#x2F;p&gt;
&lt;p&gt;In informatics&#x27; early days, ways to perform calculations still needed to be discovered. Back then, it was okay to find workarounds in order to organize everything, to create new vocabulary and languages to re-use basic calculations.&lt;&#x2F;p&gt;
&lt;p&gt;It&#x27;s now a shame to not know and use what we have. Computers and languages are so reliable that they can compute trillions of data without error, from a well made function. Besides the effects on the nanoscopic transistors, it is still reliable and we can say that the function is &amp;quot;pure&amp;quot;.&lt;&#x2F;p&gt;
&lt;p&gt;Who is good with functions and knows all their dirty little secrets? The mathematicians of course.&lt;&#x2F;p&gt;
&lt;p&gt;Just use that power! CPU engineers have done their work. Now, let&#x27;s show them what we can do on our side. Not to mention that new problems in the informatics field are about asynchronicity, multithreading, and concurrency‚Ää-‚Ääthe main purpose of FP, its reason for being.&lt;&#x2F;p&gt;
&lt;p&gt;So what will I teach now?&lt;&#x2F;p&gt;
&lt;p&gt;Do not change the language or framework, instead change your mind.&lt;&#x2F;p&gt;
&lt;p&gt;Continue with docker, linters, DDD, TDD, anything that helps you to deliver reliable apps.
But, in your everyday work:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Stop writing more code, more data structures, APIs and classes. Write less until you get a core one-line, one-argument reusable pure function. Go to the smallest bits.&lt;&#x2F;li&gt;
&lt;li&gt;Try to use these functions like a professional, and keep real world &amp;quot;effects&amp;quot; for before and after the beautiful process you wrote.&lt;&#x2F;li&gt;
&lt;li&gt;Begin to learn, step-by-step, about Functional Programming. See it as a mathematical prerequisite to become a confident senior programmer.&lt;&#x2F;li&gt;
&lt;li&gt;Begin to use functions from the FP world, just to see where they lead you (map, filter, reduce, pipe, etc.).&lt;&#x2F;li&gt;
&lt;li&gt;Begin to write your own higher-order functions. Then benefit from their useful mathematical properties.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Do you want a design pattern to begin with?
Here is an &amp;quot;onion&amp;quot; pattern (aka &lt;a href=&quot;https:&#x2F;&#x2F;dspace.mit.edu&#x2F;bitstream&#x2F;handle&#x2F;1721.1&#x2F;6064&#x2F;AIM-986.pdf&quot;&gt;stratified design&lt;&#x2F;a&gt; for any size of project:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Your programming language is an implicit layer with primitives that you have to thoroughly learn.&lt;&#x2F;li&gt;
&lt;li&gt;Code a layer for core functions which are lacking in your language such as &amp;quot;log&amp;quot;, &amp;quot;not&amp;quot;, &amp;quot;even&amp;quot;, &amp;quot;odd&amp;quot;, &amp;quot;concat&amp;quot;, &amp;quot;map&amp;quot;, &amp;quot;reduce&amp;quot;, &amp;quot;filter&amp;quot;, &amp;quot;compose&amp;quot;, &amp;quot;pipe&amp;quot;, and so on. Or you can use an existing one, like Ramda or Lodash, but if so, learn it well. Let&#x27;s call them utils.&lt;&#x2F;li&gt;
&lt;li&gt;A layer for your &amp;quot;domain&amp;quot; functions and data models that you can reuse in every project in your domain, company or business. Let&#x27;s call them helpers.&lt;&#x2F;li&gt;
&lt;li&gt;A layer for your current program functions and data models. Let&#x27;s call them services.&lt;&#x2F;li&gt;
&lt;li&gt;A top layer, which is your program and where you use data, functions, and effects under control. Ideally, this is the only place where you intricate your codebase with some front end framework. Therefore, you can keep all the rest if you change your framework.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Each layer is simply a composition of previous ones. If you respect this order then you can drop the upper layer at any time and use the previous one.&lt;&#x2F;p&gt;
&lt;p&gt;For a little project or POC, just use two or three layers.&lt;&#x2F;p&gt;
&lt;p&gt;A new generation of coders is coming. Millions of people around the world are currently learning and training; amplified by the &#x27;suction effect&#x27; of well paid and interesting jobs.&lt;&#x2F;p&gt;
&lt;p&gt;The majority think that being a problem solver or &#x27;learning what public static void method is&#x27; or &#x27;getting started with a trendy framework&#x27;, is sufficient to create working apps. This is the case if you only need disposable programs.&lt;&#x2F;p&gt;
&lt;p&gt;You can spend an entire career with those illusions, finding comfort around others with the same belief system, as I had. As a consequence, the problems with everyday production updates for unfinished and unfinishable products will increase, just like JavaScript fatigue itself.&lt;&#x2F;p&gt;
&lt;p&gt;But there is hope too. A lot of young coders are not formatted by the OO classic journey, or imperative approach. They don&#x27;t want to just solve problems with spaghetti code. Some are already fascinated with functional programming.&lt;&#x2F;p&gt;
&lt;p&gt;So, jump on the FP train before it&#x27;s too late. The internet is in primitive chaos but we will remodel it together. It will make a difference for the future, and you will become the colleague, mentor or teacher we so desperately need.&lt;&#x2F;p&gt;
&lt;p&gt;But, be kind to the people who don&#x27;t already know the good news, we don&#x27;t want to leave them behind. Revelation could take time.&lt;&#x2F;p&gt;
&lt;p&gt;I want to make a hypothesis, to better explain my own journey.&lt;&#x2F;p&gt;
&lt;p&gt;Why did JavaScript become so popular so quickly? Why do some coders fall in love with it, despite its obvious defects? I think it&#x27;s only because of its function as values, that it seduced every coder that used it.&lt;&#x2F;p&gt;
&lt;p&gt;They don&#x27;t know why it feels so good, but they stay there, naturally becoming eloquent, asking for more. Maybe this intuition will lead you to FP, just like me. Don&#x27;t wait years to open your eyes, begin today.&lt;&#x2F;p&gt;
&lt;p&gt;But be careful, if JavaScript seduced you for this reason and you never learned how to manage it, ultimately you will end up with a defective code.&lt;&#x2F;p&gt;
&lt;p&gt;What about me? Since I started using this paradigm, my programs are not only better, but more real, under control, and finally truly reliable. My codebase reduces everyday. I have never felt happier in my programmer&#x2F;teacher life, because I finally know what I&#x27;m doing.&lt;&#x2F;p&gt;
&lt;p&gt;Refactoring is now a pleasure. It feels like a game where I say: &amp;quot;Oh! I can factorize that in this way and it was just a combination of simple things I already know!&amp;quot;&lt;&#x2F;p&gt;
&lt;p&gt;I still have everything to learn from math, because I avoided it for all those years.&lt;&#x2F;p&gt;
&lt;p&gt;But now, my impostor syndrome begins to vanish. I will never fully get rid of it, since I still believe in Shoshin (beginners mind‚Ää-‚ÄäZen Buddhism), but it doesn&#x27;t scare me anymore.&lt;&#x2F;p&gt;
&lt;p&gt;PS: If you want to dive into front end FP, in place of just starting incrementally in your language, you can try to learn PureScript, ClojureScript, ReasonReact, fp-ts or Elm (my personal favorite). They target JavaScript, but force you to think as a functional programmer.&lt;&#x2F;p&gt;
</description>
        </item>
    </channel>
</rss>
